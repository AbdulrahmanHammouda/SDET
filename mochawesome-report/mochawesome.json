{
  "stats": {
    "suites": 1,
    "tests": 20,
    "passes": 0,
    "pending": 0,
    "failures": 20,
    "start": "2024-02-05T19:59:54.296Z",
    "end": "2024-02-05T19:59:54.405Z",
    "duration": 109,
    "testsRegistered": 20,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "805e7603-e384-4224-b7f4-684ac26e4b51",
      "title": "",
      "fullFile": "C:\\Users\\Abdul\\Desktop\\SDET\\test\\api.test.js",
      "file": "\\test\\api.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3293666f-671a-4817-b200-b43f6ceab9d2",
          "title": "API Routes Test",
          "fullFile": "C:\\Users\\Abdul\\Desktop\\SDET\\test\\api.test.js",
          "file": "\\test\\api.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new user",
              "fullTitle": "API Routes Test should create a new user",
              "timedOut": false,
              "duration": 31,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(appUrl)\n  .post('/api/v1/users')\n  .send({ name: 'user', email: 'user@gmail.com', password: 'user123' })\n  .expect(200)\n  .end(done);",
              "err": {
                "message": "AggregateError",
                "estack": "AggregateError\n    at internalConnectMultiple (node:net:1114:18)\n    at afterConnectMultiple (node:net:1667:5)",
                "diff": null
              },
              "uuid": "85de77dd-b66b-4a11-b372-c7adabc5bcf3",
              "parentUUID": "3293666f-671a-4817-b200-b43f6ceab9d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should authenticate user and get token",
              "fullTitle": "API Routes Test should authenticate user and get token",
              "timedOut": false,
              "duration": 3,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(appUrl)\n  .post('/api/v1/auth')\n  .send({ email: 'user@gmail.com', password: 'user123' })\n  .expect(200)\n  .end((err, res) => {\n    if (err) return done(err);\n    assert(res.body.token, 'Token not provided in response');\n    authToken = res.body.token; \n    done();\n  });",
              "err": {
                "message": "AggregateError",
                "estack": "AggregateError\n    at internalConnectMultiple (node:net:1114:18)\n    at afterConnectMultiple (node:net:1667:5)",
                "diff": null
              },
              "uuid": "2cedeaef-ec9e-4ab6-b1e6-fd306f7c7959",
              "parentUUID": "3293666f-671a-4817-b200-b43f6ceab9d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new user",
              "fullTitle": "API Routes Test should create a new user",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(appUrl)\n  .post('/api/v1/users')\n  .send({ name: 'user1', email: 'user1@gmail.com', password: 'user123' })\n  .expect(200)\n  .end(done);",
              "err": {
                "message": "AggregateError",
                "estack": "AggregateError\n    at internalConnectMultiple (node:net:1114:18)\n    at afterConnectMultiple (node:net:1667:5)",
                "diff": null
              },
              "uuid": "fb970b8d-3786-418b-bff9-95fdad949098",
              "parentUUID": "3293666f-671a-4817-b200-b43f6ceab9d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should authenticate newly created user and get token",
              "fullTitle": "API Routes Test should authenticate newly created user and get token",
              "timedOut": false,
              "duration": 3,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(appUrl)\n  .post('/api/v1/auth')\n  .send({ email: 'user1@gmail.com', password: 'user123' })\n  .expect(200)\n  .end((err, res) => {\n    if (err) return done(err);\n    assert(res.body.token, 'Token not provided in response');\n    authToken = res.body.token; \n    done();\n  });",
              "err": {
                "message": "AggregateError",
                "estack": "AggregateError\n    at internalConnectMultiple (node:net:1114:18)\n    at afterConnectMultiple (node:net:1667:5)",
                "diff": null
              },
              "uuid": "d06e24b4-aab1-46cf-a01d-c91c99dd4405",
              "parentUUID": "3293666f-671a-4817-b200-b43f6ceab9d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get user by token",
              "fullTitle": "API Routes Test should get user by token",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(appUrl)\n  .get('/api/v1/users')\n  .set('Authorization', authToken)\n  .expect(200)\n  .end((err, res) => {\n    if (err) return done(err);\n    assert.strictEqual(res.body.name, 'user1');\n    assert.strictEqual(res.body.email, 'user1@gmail.com');\n    done();\n  });",
              "err": {
                "message": "TypeError: Invalid value \"undefined\" for header \"Authorization\"",
                "estack": "TypeError [ERR_HTTP_INVALID_HEADER_VALUE]: Invalid value \"undefined\" for header \"Authorization\"\n    at ClientRequest.setHeader (node:_http_outgoing:655:3)\n    at Request.request (node_modules\\superagent\\lib\\node\\index.js:801:39)\n    at Request.end (node_modules\\superagent\\lib\\node\\index.js:919:8)\n    at Test.end (node_modules\\supertest\\lib\\test.js:118:11)\n    at Context.<anonymous> (test\\api.test.js:54:8)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": null
              },
              "uuid": "b449a9ed-b3b7-459b-9c1d-704bf1bbba6b",
              "parentUUID": "3293666f-671a-4817-b200-b43f6ceab9d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update user by token",
              "fullTitle": "API Routes Test should update user by token",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(appUrl)\n  .patch('/api/v1/users')\n  .set('Authorization', authToken)\n  .send({ name: 'newName', email: 'new_email@gmail.com', password: 'newpassword123' })\n  .expect(200)\n  .end(done);",
              "err": {
                "message": "TypeError: Invalid value \"undefined\" for header \"Authorization\"",
                "estack": "TypeError [ERR_HTTP_INVALID_HEADER_VALUE]: Invalid value \"undefined\" for header \"Authorization\"\n    at ClientRequest.setHeader (node:_http_outgoing:655:3)\n    at Request.request (node_modules\\superagent\\lib\\node\\index.js:801:39)\n    at Request.end (node_modules\\superagent\\lib\\node\\index.js:919:8)\n    at Test.end (node_modules\\supertest\\lib\\test.js:118:11)\n    at Context.<anonymous> (test\\api.test.js:68:8)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": null
              },
              "uuid": "119b9e64-5214-4f94-b620-215383cd9cc4",
              "parentUUID": "3293666f-671a-4817-b200-b43f6ceab9d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete user by token",
              "fullTitle": "API Routes Test should delete user by token",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(appUrl)\n  .delete('/api/v1/users')\n  .set('Authorization', authToken)\n  .expect(200)\n  .end(done);",
              "err": {
                "message": "TypeError: Invalid value \"undefined\" for header \"Authorization\"",
                "estack": "TypeError [ERR_HTTP_INVALID_HEADER_VALUE]: Invalid value \"undefined\" for header \"Authorization\"\n    at ClientRequest.setHeader (node:_http_outgoing:655:3)\n    at Request.request (node_modules\\superagent\\lib\\node\\index.js:801:39)\n    at Request.end (node_modules\\superagent\\lib\\node\\index.js:919:8)\n    at Test.end (node_modules\\supertest\\lib\\test.js:118:11)\n    at Context.<anonymous> (test\\api.test.js:76:8)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": null
              },
              "uuid": "eff28948-8b57-49df-8ea7-f535204d881f",
              "parentUUID": "3293666f-671a-4817-b200-b43f6ceab9d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete all users",
              "fullTitle": "API Routes Test should delete all users",
              "timedOut": false,
              "duration": 3,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(appUrl)\n  .delete('/api/v1/all-users')\n  .send({ key_admin: 'keyadmin123' })\n  .expect(200)\n  .end(done);",
              "err": {
                "message": "AggregateError",
                "estack": "AggregateError\n    at internalConnectMultiple (node:net:1114:18)\n    at afterConnectMultiple (node:net:1667:5)",
                "diff": null
              },
              "uuid": "bea42fcd-6184-40e9-9866-78dc51ef7119",
              "parentUUID": "3293666f-671a-4817-b200-b43f6ceab9d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should authenticate user and get token",
              "fullTitle": "API Routes Test should authenticate user and get token",
              "timedOut": false,
              "duration": 3,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(appUrl)\n  .post('/api/v1/auth')\n  .send({ email: 'user@gmail.com', password: 'user123' })\n  .expect(200)\n  .end((err, res) => {\n    if (err) return done(err);\n    assert(res.body.token, 'Token not provided in response');\n    authToken = res.body.token; \n    done();\n  });",
              "err": {
                "message": "AggregateError",
                "estack": "AggregateError\n    at internalConnectMultiple (node:net:1114:18)\n    at afterConnectMultiple (node:net:1667:5)",
                "diff": null
              },
              "uuid": "3206c2f3-d607-4354-a9f3-135e05cba64f",
              "parentUUID": "3293666f-671a-4817-b200-b43f6ceab9d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new user",
              "fullTitle": "API Routes Test should create a new user",
              "timedOut": false,
              "duration": 3,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(appUrl)\n  .post('/api/v1/users')\n  .send({ name: 'user5', email: 'user5@gmail.com', password: 'user123' })\n  .expect(200)\n  .end((err, res) => {\n    if (err) return done(err);\n    assert(res.body.token, 'Token not provided in response');\n    userId = res.body.id; // Save the ID of the created user\n    done();\n  });",
              "err": {
                "message": "AggregateError",
                "estack": "AggregateError\n    at internalConnectMultiple (node:net:1114:18)\n    at afterConnectMultiple (node:net:1667:5)",
                "diff": null
              },
              "uuid": "404e97be-a4f8-46c3-b99e-2b32183201bf",
              "parentUUID": "3293666f-671a-4817-b200-b43f6ceab9d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new user",
              "fullTitle": "API Routes Test should create a new user",
              "timedOut": false,
              "duration": 3,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(appUrl)\n  .post('/api/v1/users')\n  .send({ name: 'user', email: 'user@gmail.com', password: 'user123' })\n  .expect(200)\n  .end(done);",
              "err": {
                "message": "AggregateError",
                "estack": "AggregateError\n    at internalConnectMultiple (node:net:1114:18)\n    at afterConnectMultiple (node:net:1667:5)",
                "diff": null
              },
              "uuid": "99a996b3-e55d-4f29-9ddf-639bd069923e",
              "parentUUID": "3293666f-671a-4817-b200-b43f6ceab9d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete the created user",
              "fullTitle": "API Routes Test should delete the created user",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(appUrl)\n  .delete('/api/v1/users/')\n  .set('Authorization', authToken)\n  .expect(200)\n  .end(done);",
              "err": {
                "message": "TypeError: Invalid value \"undefined\" for header \"Authorization\"",
                "estack": "TypeError [ERR_HTTP_INVALID_HEADER_VALUE]: Invalid value \"undefined\" for header \"Authorization\"\n    at ClientRequest.setHeader (node:_http_outgoing:655:3)\n    at Request.request (node_modules\\superagent\\lib\\node\\index.js:801:39)\n    at Request.end (node_modules\\superagent\\lib\\node\\index.js:919:8)\n    at Test.end (node_modules\\supertest\\lib\\test.js:118:11)\n    at Context.<anonymous> (test\\api.test.js:125:8)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": null
              },
              "uuid": "f564fcb9-bfc0-4d7d-a42f-dce605e7b7e1",
              "parentUUID": "3293666f-671a-4817-b200-b43f6ceab9d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to authenticate a recently deleted user",
              "fullTitle": "API Routes Test should fail to authenticate a recently deleted user",
              "timedOut": false,
              "duration": 3,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(appUrl)\n  .post('/api/v1/auth')\n  .send({ email: 'user@gmail.com', password: 'user123' })\n  .expect(401)\n  .end(done);",
              "err": {
                "message": "AggregateError",
                "estack": "AggregateError\n    at internalConnectMultiple (node:net:1114:18)\n    at afterConnectMultiple (node:net:1667:5)",
                "diff": null
              },
              "uuid": "f6f24cd2-43bf-4b90-8c4c-6cd69327514c",
              "parentUUID": "3293666f-671a-4817-b200-b43f6ceab9d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create multiple users",
              "fullTitle": "API Routes Test should create multiple users",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(appUrl)\n  .post('/api/v1/users')\n  .send({ name: 'user1', email: 'user1@gmail.com', password: 'user123' })\n  .expect(200)\n  .end(() => {\n    request(appUrl)\n      .post('/api/v1/users')\n      .send({ name: 'user2', email: 'user2@gmail.com', password: 'user123' })\n      .expect(200)\n      .end(done);\n  });",
              "err": {
                "message": "AggregateError",
                "estack": "AggregateError\n    at internalConnectMultiple (node:net:1114:18)\n    at afterConnectMultiple (node:net:1667:5)",
                "diff": null
              },
              "uuid": "bd298fed-2607-4dbe-9bf3-a25874f01b92",
              "parentUUID": "3293666f-671a-4817-b200-b43f6ceab9d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should authenticate and get details for one of the users",
              "fullTitle": "API Routes Test should authenticate and get details for one of the users",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(appUrl)\n  .get('/api/v1/users')\n  .set('Authorization', authToken)\n  .expect(200)\n  .end((err, res) => {\n    if (err) return done(err);\n    // Assuming the response contains an array of users, check details of the first user\n    const user = res.body[0];\n    assert.strictEqual(user.name, 'user1');\n    assert.strictEqual(user.email, 'user1@gmail.com');\n    done();\n  });",
              "err": {
                "message": "TypeError: Invalid value \"undefined\" for header \"Authorization\"",
                "estack": "TypeError [ERR_HTTP_INVALID_HEADER_VALUE]: Invalid value \"undefined\" for header \"Authorization\"\n    at ClientRequest.setHeader (node:_http_outgoing:655:3)\n    at Request.request (node_modules\\superagent\\lib\\node\\index.js:801:39)\n    at Request.end (node_modules\\superagent\\lib\\node\\index.js:919:8)\n    at Test.end (node_modules\\supertest\\lib\\test.js:118:11)\n    at Context.<anonymous> (test\\api.test.js:155:8)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": null
              },
              "uuid": "7ef81297-e6c6-489a-959e-6cdd4eef1be5",
              "parentUUID": "3293666f-671a-4817-b200-b43f6ceab9d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update details for one of the users",
              "fullTitle": "API Routes Test should update details for one of the users",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(appUrl)\n  .patch('api/v1/users/')\n  .set('Authorization', authToken)\n  .send({ name: 'updatedName', email: 'updated_email@gmail.com', password: 'updatedpassword123' })\n  .expect(200)\n  .end(done);",
              "err": {
                "message": "TypeError: Invalid value \"undefined\" for header \"Authorization\"",
                "estack": "TypeError [ERR_HTTP_INVALID_HEADER_VALUE]: Invalid value \"undefined\" for header \"Authorization\"\n    at ClientRequest.setHeader (node:_http_outgoing:655:3)\n    at Request.request (node_modules\\superagent\\lib\\node\\index.js:801:39)\n    at Request.end (node_modules\\superagent\\lib\\node\\index.js:919:8)\n    at Test.end (node_modules\\supertest\\lib\\test.js:118:11)\n    at Context.<anonymous> (test\\api.test.js:171:8)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": null
              },
              "uuid": "3cf3db3d-527b-43eb-822b-0da82bd5b1a6",
              "parentUUID": "3293666f-671a-4817-b200-b43f6ceab9d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to authenticate with invalid token",
              "fullTitle": "API Routes Test should fail to authenticate with invalid token",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(appUrl)\n  .get('/api/v1/users')\n  .set('Authorization', 'invalidtoken')\n  .expect(401)\n  .end(done);",
              "err": {
                "message": "AggregateError",
                "estack": "AggregateError\n    at internalConnectMultiple (node:net:1114:18)\n    at afterConnectMultiple (node:net:1667:5)",
                "diff": null
              },
              "uuid": "82d0d9c7-5c97-4eac-9b99-4a565cb315f3",
              "parentUUID": "3293666f-671a-4817-b200-b43f6ceab9d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to create a user with invalid body",
              "fullTitle": "API Routes Test should fail to create a user with invalid body",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(appUrl)\n  .post('/api/v1/users')\n  .send({ invalidKey: 'invalidValue' })\n  .expect(400)\n  .end(done);",
              "err": {
                "message": "AggregateError",
                "estack": "AggregateError\n    at internalConnectMultiple (node:net:1114:18)\n    at afterConnectMultiple (node:net:1667:5)",
                "diff": null
              },
              "uuid": "3e29b35a-5790-4a6a-9c80-add16ac4d728",
              "parentUUID": "3293666f-671a-4817-b200-b43f6ceab9d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create multiple users",
              "fullTitle": "API Routes Test should create multiple users",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(appUrl)\n  .post('/api/v1/users')\n  .send({ name: 'user3', email: 'user3@gmail.com', password: 'user123' })\n  .expect(200)\n  .end(() => {\n    request(appUrl)\n      .post('/api/v1/users')\n      .send({ name: 'user4', email: 'user4@gmail.com', password: 'user123' })\n      .expect(200)\n      .end(done);\n  });",
              "err": {
                "message": "AggregateError",
                "estack": "AggregateError\n    at internalConnectMultiple (node:net:1114:18)\n    at afterConnectMultiple (node:net:1667:5)",
                "diff": null
              },
              "uuid": "600f05d6-9adf-4ac0-a2eb-751a4fd191ef",
              "parentUUID": "3293666f-671a-4817-b200-b43f6ceab9d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update the data of one user to be like the other",
              "fullTitle": "API Routes Test should update the data of one user to be like the other",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "request(appUrl)\n  .patch('/api/v1/users/')\n  .set('Authorization', authToken)\n  .send({ name: 'user4', email: 'user4@gmail.com' }) // Update user1 to have the same data as user2\n  .expect(400) // Expecting a 400 error because users cannot have duplicate names\n  .end(done);",
              "err": {
                "message": "TypeError: Invalid value \"undefined\" for header \"Authorization\"",
                "estack": "TypeError [ERR_HTTP_INVALID_HEADER_VALUE]: Invalid value \"undefined\" for header \"Authorization\"\n    at ClientRequest.setHeader (node:_http_outgoing:655:3)\n    at Request.request (node_modules\\superagent\\lib\\node\\index.js:801:39)\n    at Request.end (node_modules\\superagent\\lib\\node\\index.js:919:8)\n    at Test.end (node_modules\\supertest\\lib\\test.js:118:11)\n    at Context.<anonymous> (test\\api.test.js:209:8)\n    at process.processImmediate (node:internal/timers:478:21)",
                "diff": null
              },
              "uuid": "9f266d05-a779-404c-8507-e0635e8cf09b",
              "parentUUID": "3293666f-671a-4817-b200-b43f6ceab9d2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "85de77dd-b66b-4a11-b372-c7adabc5bcf3",
            "2cedeaef-ec9e-4ab6-b1e6-fd306f7c7959",
            "fb970b8d-3786-418b-bff9-95fdad949098",
            "d06e24b4-aab1-46cf-a01d-c91c99dd4405",
            "b449a9ed-b3b7-459b-9c1d-704bf1bbba6b",
            "119b9e64-5214-4f94-b620-215383cd9cc4",
            "eff28948-8b57-49df-8ea7-f535204d881f",
            "bea42fcd-6184-40e9-9866-78dc51ef7119",
            "3206c2f3-d607-4354-a9f3-135e05cba64f",
            "404e97be-a4f8-46c3-b99e-2b32183201bf",
            "99a996b3-e55d-4f29-9ddf-639bd069923e",
            "f564fcb9-bfc0-4d7d-a42f-dce605e7b7e1",
            "f6f24cd2-43bf-4b90-8c4c-6cd69327514c",
            "bd298fed-2607-4dbe-9bf3-a25874f01b92",
            "7ef81297-e6c6-489a-959e-6cdd4eef1be5",
            "3cf3db3d-527b-43eb-822b-0da82bd5b1a6",
            "82d0d9c7-5c97-4eac-9b99-4a565cb315f3",
            "3e29b35a-5790-4a6a-9c80-add16ac4d728",
            "600f05d6-9adf-4ac0-a2eb-751a4fd191ef",
            "9f266d05-a779-404c-8507-e0635e8cf09b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 75,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}